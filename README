The purpose of this card game is to write a simple application for some popular card games using TomEE, Java, and a few other Java technologies.

Golf is a conversion of a game I originally had written using C# and Windows Desktop client and Windows Server applications.  

During the conversion, I've been stating to myself did I really write that?  Sadly, yes I did.

So part of this is to better organize and utilize Java technologies.  With that said, I pretty much suck at pretty UI design, I can write code at JSP levels and do .css but pretty css?  Not too great at it, maybe I'll get better at it as time goes on.

Thanks for reading.

Goals - 
1. Complete the conversion of my golf game to Java making it web based.
2. Add additional games, like pitch and spades.
3. Always allow others to contribute in anyway they would like.

Layout -
Generally speaking I package by feature.
Implementation as a result has a high level of cohesion.
Packages that span multiple feature are brought to the highest level to support all dependencies beneath it.

Places this can be seen, is data.entities is packaged at com.djr.cards and the entities are used by all features as a result.
Another example is in the games package.  Where I have a games.stats package with just a UserStatsDAO.  But note the more specific games.golf.stats package where the golf stats are implemented which depend on the games.stats.UserStatsDAO.  Since nothing outside of games needs access to games.stats.UserStatsDAO, that general stats package won't go any higher than that.

I also use interfaces for all my "service" layer code and inheritance for managing things that several classes are going to need.  I do this to avoid code duplication, think DRY from CS 101 if you will.

Am I perfect?  Heck no, but I like what I do and will learn better ways to do things throughout my career and constantly work to improve this and anything I work on.
